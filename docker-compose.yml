version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: data_synthesis_postgres
    environment:
      POSTGRES_DB: data_synthesis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - data_synthesis_network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: data_synthesis_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - data_synthesis_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data_synthesis_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/data_synthesis
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
      - DEBUG=True
      - UPLOAD_PATH=/app/storage/uploads
      - DATASET_PATH=/app/storage/datasets
      - MODEL_PATH=/app/storage/models
      - MAX_WORKERS=4
      - MAX_CONCURRENT_TASKS=10
      - MEMORY_LIMIT_GB=8
    ports:
      - "8000:8000"
    volumes:
      - ./storage:/app/storage
      - ./backend/app:/app/app
    depends_on:
      - postgres
      - redis
    networks:
      - data_synthesis_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'

  # Celery工作器 - 抠图任务
  celery_matting:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data_synthesis_celery_matting
    command: celery -A app.celery_app worker --loglevel=info --queue=matting --concurrency=2
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/data_synthesis
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
      - UPLOAD_PATH=/app/storage/uploads
      - DATASET_PATH=/app/storage/datasets
      - MODEL_PATH=/app/storage/models
    volumes:
      - ./storage:/app/storage
      - ./backend/app:/app/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - data_synthesis_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2'

  # Celery工作器 - 合成任务
  celery_synthesis:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data_synthesis_celery_synthesis
    command: celery -A app.celery_app worker --loglevel=info --queue=synthesis --concurrency=3
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/data_synthesis
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
      - UPLOAD_PATH=/app/storage/uploads
      - DATASET_PATH=/app/storage/datasets
      - MODEL_PATH=/app/storage/models
    volumes:
      - ./storage:/app/storage
      - ./backend/app:/app/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - data_synthesis_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3'

  # Celery Flower监控
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data_synthesis_flower
    command: celery -A app.celery_app flower --port=5555
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/data_synthesis
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - data_synthesis_network
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: data_synthesis_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://backend:8000
      - VITE_WS_URL=ws://backend:8000/ws
    depends_on:
      - backend
    networks:
      - data_synthesis_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: data_synthesis_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - ./storage:/var/www/storage
    depends_on:
      - frontend
      - backend
    networks:
      - data_synthesis_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  data_synthesis_network:
    driver: bridge